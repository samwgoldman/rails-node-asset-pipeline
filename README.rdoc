== Headless Javascript TDD Using Rails Asset Pipeline With Node.js

This is an example project showing how you can use Node.js to test javascript that uses Rails' asset pipeline.

== Why

Doing TDD with capybara-webkit is really painful. When you write a failing test, the error feedback probably looks something like <tt>undefined is not a function</tt>. That's not very helpful.

Selenium gives somewhat better error messages. You might get something as helpful as <tt>foo.bar is not a function</tt>.

Poltergeist is a bit more helpful: <tt>'undefined' is not a function (evaluating 'foo.bar()')</tt>

With Node.js:

  TypeError: Object #<Foo> has no method 'bar'
   at Context.<anonymous> (/Users/sam/code/rails-node/tmp/jspec20121102-19297-136bbxp:20:29)
   at Test.Runnable.run (/usr/local/share/npm/lib/node_modules/mocha/lib/runnable.js:200:32)
   at Runner.runTest (/usr/local/share/npm/lib/node_modules/mocha/lib/runner.js:307:10)
   at Runner.runTests.next (/usr/local/share/npm/lib/node_modules/mocha/lib/runner.js:353:12)
   at next (/usr/local/share/npm/lib/node_modules/mocha/lib/runner.js:235:14)
   at Runner.hooks (/usr/local/share/npm/lib/node_modules/mocha/lib/runner.js:244:7)
   at next (/usr/local/share/npm/lib/node_modules/mocha/lib/runner.js:192:23)
   at Runner.hook (/usr/local/share/npm/lib/node_modules/mocha/lib/runner.js:212:5)
   at process.startup.processNextTick.process._tickCallback (node.js:244:9)

== How

I should note that this is just a proof of concept.

First we add <tt>spec/javascripts</tt> to the asset paths. This project modifies <tt>config/environments/test.rb</tt> so the files are only available in the test environment.

Now we can use Rails' asset pipeline to compile our spec files. This project includes a simple script, <tt>script/jspec</tt>, which finds all the spec files and runs each one individually with mocha.

Node.js uses a module system, so you need to make any code you want to test globally available. Naively, I created <tt>spec/javascripts/spec_helper</tt> that just aliases Node's <tt>global</tt> object as <tt>window</tt>. You can also load any support libraries as well.

== Future Work

It should be easy to use jsdom to simulate a headless browser. This project doesn't attempt to do this, yet.

== Is it good?

Yes.
